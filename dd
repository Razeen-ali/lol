getBankingDetails(nbks: string[]): Observable<Record<string, BankingResponse>> {
    try {
      console.log('🏦 Banking API - Input NBKs:', nbks);
      
      const formattedNbks = nbks.map(nbk => nbk.toUpperCase());
      console.log('🏦 Banking API - Formatted NBKs:', formattedNbks);
      
      const headers = new HttpHeaders()
        .set(environment.bankingApi.key, environment.bankingApi.value);

      return this.http.post<any>(this.BANKING_API, formattedNbks, { headers }).pipe(
        tap(response => {
          console.log('🏦 Banking API - Raw Response:', response);
          if (Array.isArray(response)) {
            response.forEach(item => {
              console.log('🏦 Banking API - Individual Item:', {
                NbkId: item.NbkId || item.nbkid,
                EntitlementStartDate: item.EntitlementStartDate,
                LobName: item.LobName,
                JobName: item.JobName,
                LastSyncDate: item.LastSyncDate
              });
            });
          }
        }),
        map(response => {
          if (Array.isArray(response)) {
            const transformed = response.reduce((acc, item) => {
              if (item) {
                const nbkId = item.NbkId || item.nbkid;
                console.log(`🏦 Banking API - Processing NBK: ${nbkId}`, item);
                
                acc[nbkId] = {
                  nbkid: nbkId,
                  EntitlementStartDate: item.EntitlementStartDate || '',
                  LobName: item.LobName || '',
                  JobName: item.JobName || '',
                  LastSyncDate: item.LastSyncDate || ''
                };
                console.log(`🏦 Banking API - Transformed data for ${nbkId}:`, acc[nbkId]);
              }
              return acc;
            }, {});
            console.log('🏦 Banking API - Final transformed data:', transformed);
            return transformed;
          }
          return response || {};
        }),
        catchError((error: HttpErrorResponse) => {
          console.error('🏦 Banking API - Error:', error);
          return of({});
        })
      );
    } catch (error) {
      console.error('🏦 Banking API - Unexpected error:', error);
      return of({});
    }
  }
