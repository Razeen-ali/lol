getNBKrequirements(nbk: string): Observable<NBKrequirements> {
    try {
      console.log(`üîç Processing requirements for NBK: ${nbk}`);
      
      return forkJoin({
        adGroup: this.checkADGroup(nbk),
        csarDetails: this.checkCSAR(nbk),
        bankingDetails: this.getBankingDetails([nbk])
      }).pipe(
        map(results => {
          console.log(`üìä Combined API results for ${nbk}:`, JSON.stringify(results, null, 2));
          
          const bankingData = results.bankingDetails[nbk.toUpperCase()];
          console.log(`üè¶ Banking data for ${nbk}:`, bankingData);

          const requirements: NBKrequirements = {
            nbk,
            name: results.csarDetails.AssociateShortName || 'Unknown',
            adGroup: results.adGroup,
            autoLog: results.csarDetails.IsAutoLogTouchpointEnable,
            outFrom: results.csarDetails.IsFromOutlookSync,
            outTo: results.csarDetails.IsToOutSync,
            lob: bankingData?.LobName ? 
                 (bankingData.LobName === 'MARKETS' ? 'Markets' : 
                  bankingData.LobName === 'ECRM' ? 'Banking' : 
                  bankingData.LobName) : '-',
            lobStatus: bankingData?.LobName === 'MARKETS',
            hangfireJob: bankingData?.JobName || '-',
            hangfireStatus: !!bankingData?.JobName,
            entitlementStartDate: bankingData?.EntitlementStartDate ? 
                                new Date(bankingData.EntitlementStartDate).toLocaleDateString() : '-',
            lastSyncDate: bankingData?.LastSyncDate ? 
                         new Date(bankingData.LastSyncDate).toLocaleString() : '-',
            associateStatus: results.csarDetails.Associate.Status
          };
          
          console.log(`‚úÖ Final requirements for ${nbk}:`, requirements);
          return requirements;
        }),
        catchError((error) => {
          console.error(`‚ùå Error processing requirements for ${nbk}:`, error);
          return of({
            nbk,
            name: 'Unknown',
            adGroup: false,
            autoLog: false,
            outFrom: false,
            outTo: false,
            lob: '-',
            lobStatus: false,
            hangfireJob: '-',
            hangfireStatus: false,
            entitlementStartDate: '-',
            lastSyncDate: '-',
            associateStatus: 'Unknown'
          });
        })
      );
    } catch (error) {
      console.error(`Error in getNBKrequirements for NBK ${nbk}:`, error);
      return of({
        nbk,
        name: 'Unknown',
        adGroup: false,
        autoLog: false,
        outFrom: false,
        outTo: false,
        lob: '-',
        lobStatus: false,
        hangfireJob: '-',
        hangfireStatus: false,
        entitlementStartDate: '-',
        lastSyncDate: '-',
        associateStatus: 'Unknown'
      });
    }
  }
