getNBKrequirements(nbk: string): Observable<NBKrequirements> {
    try {
      return forkJoin({
        adGroup: this.checkADGroup(nbk),
        csarDetails: this.checkCSAR(nbk),
        bankingDetails: this.getBankingDetails([nbk])
      }).pipe(
        map(results => {
          const bankingData = results.bankingDetails[nbk];
          
          const formatDate = (dateStr: string) => {
            if (!dateStr) return '-';
            try {
              return new Date(dateStr).toLocaleString();
            } catch {
              return dateStr;
            }
          };

          if (!bankingData) {
            return {
              nbk,
              name: results.csarDetails.AssociateShortName || 'Unknown',
              adGroup: results.adGroup,
              autoLog: results.csarDetails.IsAutoLogTouchpointEnable,
              outFrom: results.csarDetails.IsFromOutlookSync,
              outTo: results.csarDetails.IsToOutSync,
              lob: '-',
              lobStatus: false,
              hangfireJob: '-',
              hangfireStatus: false,
              entitlementStartDate: '-',
              lastSyncDate: '-',
              associateStatus: results.csarDetails.Associate.Status
            };
          }

          const lob = bankingData.LobName === 'MARKETS' ? 'Markets' : 
                     bankingData.LobName === 'ECRM' ? 'Banking' : 
                     bankingData.LobName || '-';

          return {
            nbk,
            name: results.csarDetails.AssociateShortName || 'Unknown',
            adGroup: results.adGroup,
            autoLog: results.csarDetails.IsAutoLogTouchpointEnable,
            outFrom: results.csarDetails.IsFromOutlookSync,
            outTo: results.csarDetails.IsToOutSync,
            lob,
            lobStatus: bankingData.LobName === 'MARKETS',
            hangfireJob: bankingData.JobName || '-',
            hangfireStatus: !!bankingData.JobName,
            entitlementStartDate: formatDate(bankingData.EntitlementStartDate),
            lastSyncDate: formatDate(bankingData.LastSyncDate),
            associateStatus: results.csarDetails.Associate.Status
          };
        }),
        catchError(() => of({
          nbk,
          name: 'Unknown',
          adGroup: false,
          autoLog: false,
          outFrom: false,
          outTo: false,
          lob: '-',
          lobStatus: false,
          hangfireJob: '-',
          hangfireStatus: false,
          entitlementStartDate: '-',
          lastSyncDate: '-',
          associateStatus: 'Unknown'
        }))
      );
    } catch (error) {
      console.error(`Error in getNBKrequirements for NBK ${nbk}:`, error);
      return of({
        nbk,
        name: 'Unknown',
        adGroup: false,
        autoLog: false,
        outFrom: false,
        outTo: false,
        lob: '-',
        lobStatus: false,
        hangfireJob: '-',
        hangfireStatus: false,
        entitlementStartDate: '-',
        lastSyncDate: '-',
        associateStatus: 'Unknown'
      });
    }
  }
